{"ast":null,"code":"import { db } from \"../backend/app_backend\";\nimport jQuery from \"jquery\";\nimport Swal from \"sweetalert2\";\nimport navigate from \"../inc/scripts/utilities\";\nexport const saveLocation = e => {\n  e.preventDefault();\n  jQuery($ => {\n    $.noConflict();\n    const $defaultLocation = $(\"#defaultLocation\").val().trim();\n\n    //check if the location is empty\n    if ($defaultLocation === undefined || $defaultLocation == \"\") {\n      Swal.fire({\n        title: \"Invalid Location!\",\n        html: \"<p class=' text-center text-danger'>Please enter a valid location</p>\",\n        confirmButtonColor: \"rgb(83, 166, 250)\",\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        allowEnterKey: false,\n        timer: 4000\n      });\n    } else {\n      db.update(\"USER_DEFAULT_LOCATION\", $defaultLocation);\n      Swal.fire({\n        text: \"Location updated successfully!\",\n        icon: \"success\",\n        toast: true,\n        position: \"top\",\n        showConfirmButton: false,\n        timer: 3000\n      });\n    }\n  });\n};\nexport const getDefaultLocation = () => {\n  return db.get(\"USER_DEFAULT_LOCATION\");\n};\nexport const restoreFactorySettings = () => {\n  db.destroy();\n  navigate(\"/\");\n};\nexport const trackSavedLocationWeather = () => {\n  jQuery($ => {\n    $.noConflict();\n    const $toggleBtn = document.getElementById(\"flexSwitchCheckDefault\");\n    if ($toggleBtn.checked) {\n      //check if the value is in the database, then update it\n      if (db.get(\"TRACK_SAVED_LOCATION_WEATHER\")) {\n        db.update(\"TRACK_SAVED_LOCATION_WEATHER\", true);\n        Swal.fire({\n          text: \"Saved location would be tracked!\",\n          icon: \"success\",\n          toast: true,\n          position: \"top\",\n          showConfirmButton: false,\n          timer: 3000\n        });\n      } else {\n        db.create(\"TRACK_SAVED_LOCATION_WEATHER\", true);\n        Swal.fire({\n          text: \"Saved location would be tracked by default!\",\n          icon: \"info\",\n          toast: true,\n          position: \"top\",\n          showConfirmButton: false,\n          timer: 3000\n        });\n      }\n    } else {\n      if (db.get(\"TRACK_SAVED_LOCATION_WEATHER\")) {\n        db.update(\"TRACK_SAVED_LOCATION_WEATHER\", false);\n        Swal.fire({\n          text: \"Saved location would not be tracked!\",\n          icon: \"warning\",\n          toast: true,\n          position: \"top\",\n          showConfirmButton: false,\n          timer: 3000\n        });\n      }\n    }\n  });\n};\nexport const checkTrackedLocation = () => {\n  let value = db.get(\"TRACK_SAVED_LOCATION_WEATHER\");\n  if (value === true) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const changeWeatherUnit = e => {\n  jQuery($ => {\n    e.preventDefault();\n    const weatherUnit = $(\"#weatherUnitContainer\").val();\n    let unitToStore;\n    switch (weatherUnit) {\n      case \"0\":\n        unitToStore = \"metric\";\n        break;\n      case \"1\":\n        unitToStore = \"default\";\n        break;\n      case \"2\":\n        unitToStore = \"imperial\";\n        break;\n      default:\n        Swal.fire({\n          toast: true,\n          text: \"Select a valid unit\",\n          icon: \"warning\",\n          timer: 1000,\n          position: \"top\",\n          showConfirmButton: false\n        });\n        break;\n    }\n    //check if valuex exists in the DB\n    if (db.get(\"WEATHER_UNIT\")) {\n      db.update(\"WEATHER_UNIT\", unitToStore);\n      Swal.fire({\n        toast: true,\n        text: \"Weather unit updated successfully\",\n        icon: \"success\",\n        timer: 1500,\n        position: \"top\",\n        showConfirmButton: false\n      });\n    } else {\n      db.create(\"WEATHER_UNIT\", unitToStore);\n      Swal.fire({\n        toast: true,\n        text: \"Weather unit stored successfully\",\n        icon: \"info\",\n        timer: 1500,\n        position: \"top\",\n        showConfirmButton: false\n      });\n    }\n  });\n};","map":{"version":3,"names":["db","jQuery","Swal","navigate","saveLocation","e","preventDefault","$","noConflict","$defaultLocation","val","trim","undefined","fire","title","html","confirmButtonColor","allowOutsideClick","allowEscapeKey","allowEnterKey","timer","update","text","icon","toast","position","showConfirmButton","getDefaultLocation","get","restoreFactorySettings","destroy","trackSavedLocationWeather","$toggleBtn","document","getElementById","checked","create","checkTrackedLocation","value","changeWeatherUnit","weatherUnit","unitToStore"],"sources":["/Users/apple/Documents/ggg/react-project/src/backend/settings.js"],"sourcesContent":["import { db } from \"../backend/app_backend\";\nimport jQuery from \"jquery\";\nimport Swal from \"sweetalert2\";\nimport navigate from \"../inc/scripts/utilities\";\n\nexport const saveLocation = (e) => {\n\te.preventDefault();\n\n\tjQuery(($) => {\n\t\t$.noConflict();\n\n\t\tconst $defaultLocation = $(\"#defaultLocation\").val().trim();\n\n\t\t//check if the location is empty\n\t\tif ($defaultLocation === undefined || $defaultLocation == \"\") {\n\t\t\tSwal.fire({\n\t\t\t\ttitle: \"Invalid Location!\",\n\t\t\t\thtml: \"<p class=' text-center text-danger'>Please enter a valid location</p>\",\n\t\t\t\tconfirmButtonColor: \"rgb(83, 166, 250)\",\n\t\t\t\tallowOutsideClick: false,\n\t\t\t\tallowEscapeKey: false,\n\t\t\t\tallowEnterKey: false,\n\t\t\t\ttimer: 4000,\n\t\t\t});\n\t\t} else {\n\t\t\tdb.update(\"USER_DEFAULT_LOCATION\", $defaultLocation);\n\t\t\tSwal.fire({\n\t\t\t\ttext: \"Location updated successfully!\",\n\t\t\t\ticon: \"success\",\n\t\t\t\ttoast: true,\n\t\t\t\tposition: \"top\",\n\t\t\t\tshowConfirmButton: false,\n\t\t\t\ttimer: 3000,\n\t\t\t});\n\t\t}\n\t});\n};\n\nexport const getDefaultLocation = () => {\n\treturn db.get(\"USER_DEFAULT_LOCATION\");\n};\n\nexport const restoreFactorySettings = () => {\n\tdb.destroy();\n\tnavigate(\"/\");\n};\n\nexport const trackSavedLocationWeather = () => {\n\tjQuery(($) => {\n\t\t$.noConflict();\n\t\tconst $toggleBtn = document.getElementById(\"flexSwitchCheckDefault\");\n\n\t\tif ($toggleBtn.checked) {\n\t\t\t//check if the value is in the database, then update it\n\t\t\tif (db.get(\"TRACK_SAVED_LOCATION_WEATHER\")) {\n\t\t\t\tdb.update(\"TRACK_SAVED_LOCATION_WEATHER\", true);\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttext: \"Saved location would be tracked!\",\n\t\t\t\t\ticon: \"success\",\n\t\t\t\t\ttoast: true,\n\t\t\t\t\tposition: \"top\",\n\t\t\t\t\tshowConfirmButton: false,\n\t\t\t\t\ttimer: 3000,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdb.create(\"TRACK_SAVED_LOCATION_WEATHER\", true);\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttext: \"Saved location would be tracked by default!\",\n\t\t\t\t\ticon: \"info\",\n\t\t\t\t\ttoast: true,\n\t\t\t\t\tposition: \"top\",\n\t\t\t\t\tshowConfirmButton: false,\n\t\t\t\t\ttimer: 3000,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif (db.get(\"TRACK_SAVED_LOCATION_WEATHER\")) {\n\t\t\t\tdb.update(\"TRACK_SAVED_LOCATION_WEATHER\", false);\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttext: \"Saved location would not be tracked!\",\n\t\t\t\t\ticon: \"warning\",\n\t\t\t\t\ttoast: true,\n\t\t\t\t\tposition: \"top\",\n\t\t\t\t\tshowConfirmButton: false,\n\t\t\t\t\ttimer: 3000,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n};\n\nexport const checkTrackedLocation = () => {\n\tlet value = db.get(\"TRACK_SAVED_LOCATION_WEATHER\");\n\tif (value === true) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nexport const changeWeatherUnit = (e) => {\n\tjQuery(($) => {\n\t\te.preventDefault();\n\t\tconst weatherUnit = $(\"#weatherUnitContainer\").val();\n\t\tlet unitToStore;\n\t\tswitch (weatherUnit) {\n\t\t\tcase \"0\":\n\t\t\t\tunitToStore = \"metric\";\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\tunitToStore = \"default\";\n\t\t\t\tbreak;\n\t\t\tcase \"2\":\n\t\t\t\tunitToStore = \"imperial\";\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttoast:true,\n\t\t\t\t\ttext:\"Select a valid unit\",\n\t\t\t\t\ticon:\"warning\",\n\t\t\t\t\ttimer:1000,\n\t\t\t\t\tposition:\"top\",\n\t\t\t\t\tshowConfirmButton:false,\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t}\n\t\t//check if valuex exists in the DB\n\t\tif(db.get(\"WEATHER_UNIT\")){\n\t\t\tdb.update(\"WEATHER_UNIT\",unitToStore);\n\t\t\tSwal.fire({\n\t\t\t\ttoast:true,\n\t\t\t\ttext:\"Weather unit updated successfully\",\n\t\t\t\ticon:\"success\",\n\t\t\t\ttimer:1500,\n\t\t\t\tposition:\"top\",\n\t\t\t\tshowConfirmButton:false\n\t\t\t})\n\t\t}else{\n\t\t\tdb.create(\"WEATHER_UNIT\",unitToStore);\n\t\t\tSwal.fire({\n\t\t\t\ttoast:true,\n\t\t\t\ttext:\"Weather unit stored successfully\",\n\t\t\t\ticon:\"info\",\n\t\t\t\ttimer:1500,\n\t\t\t\tposition:\"top\",\n\t\t\t\tshowConfirmButton:false\n\t\t\t})\n\t\t}\n\t});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}