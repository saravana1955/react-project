{"ast":null,"code":"import jQuery from \"jquery\";\nimport { db } from \"../backend/app_backend\";\nimport Swal from \"sweetalert2\";\nimport * as weatherAPI from \"./getCurrentWeather\";\nconst getGeolocation = () => {\n  //check if the user's device supports Geolocation API\n  if (navigator.geolocation) {\n    const OPTIONS = {\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: Infinity\n    };\n    const error = error => {\n      Swal.fire({\n        toast: true,\n        text: error.message,\n        icon: \"warning\",\n        timer: 1000,\n        position: \"top\",\n        showConfirmButton: false\n      }).then(willProceed => {\n        // @see line 52\n        weatherAPI.scrollToElement(\"weatherContainer\");\n      });\n    };\n    navigator.geolocation.watchPosition(position => {\n      //check if the user's position was saved before\n      if (!db.get(\"USER_LONGITUDE\") && !db.get(\"USER_LATITUDE\")) {\n        db.create(\"USER_LONGITUDE\", position.coords.longitude);\n        db.create(\"USER_LATITUDE\", position.coords.latitude);\n      } else {\n        //if saved, then get the current weather using their coordinates\n\n        jQuery($ => {\n          $.noConflict();\n          const longitude = position.coords.longitude || db.get(\"USER_LONGITUDE\"),\n            latitude = position.coords.latitude || db.get(\"USER_LATITUDE\");\n          const URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${weatherAPI.API_KEY}&units=${weatherAPI.WEATHER_UNIT}`;\n          $.ajax({\n            url: URL,\n            processData: false,\n            success: (result, status, xhr) => {\n              if (xhr.status != 200) {\n                Swal.fire({\n                  toast: true,\n                  position: \"top\",\n                  text: \"Something went wrong!\",\n                  icon: \"info\",\n                  showConfirmButton: false,\n                  timer: 3000\n                }).then(willProceed => {\n                  //scroll to top after notification\n                  weatherAPI.scrollToElement(\"weatherContainer\");\n                });\n              } else {\n                //if API call was successful\n                if (result.cod == 200) {\n                  weatherAPI.updateReactDom(result);\n                  weatherAPI.scrollToElement(\"weatherContainer\");\n                }\n              }\n            },\n            error: (xhr, status, error) => {\n              Swal.fire({\n                toast: true,\n                text: error,\n                icon: \"warning\",\n                timer: 2000,\n                position: \"top\",\n                showConfirmButton: false\n              }).then(willProceed => {\n                // @see line 52\n                weatherAPI.scrollToElement(\"weatherContainer\");\n              });\n            }\n          });\n        });\n      }\n    }, error, OPTIONS);\n  } else {\n    Swal.fire({\n      toast: true,\n      text: \"Geolocation not supported!\",\n      icon: \"error\",\n      position: \"top\",\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n};\nexport default getGeolocation;","map":{"version":3,"names":["jQuery","db","Swal","weatherAPI","getGeolocation","navigator","geolocation","OPTIONS","enableHighAccuracy","maximumAge","timeout","Infinity","error","fire","toast","text","message","icon","timer","position","showConfirmButton","then","willProceed","scrollToElement","watchPosition","get","create","coords","longitude","latitude","$","noConflict","URL","API_KEY","WEATHER_UNIT","ajax","url","processData","success","result","status","xhr","cod","updateReactDom"],"sources":["/Users/apple/Documents/ggg/react-project/src/apis/getGeolocation.js"],"sourcesContent":["import jQuery from \"jquery\";\nimport { db } from \"../backend/app_backend\";\nimport Swal from \"sweetalert2\";\nimport * as weatherAPI from \"./getCurrentWeather\";\nconst getGeolocation = () => {\n\t//check if the user's device supports Geolocation API\n\tif (navigator.geolocation) {\n\t\tconst OPTIONS = {\n\t\t\tenableHighAccuracy: true,\n\t\t\tmaximumAge: 0,\n\t\t\ttimeout: Infinity,\n\t\t};\n\t\tconst error = (error) => {\n\t\t\tSwal.fire({\n\t\t\t\ttoast: true,\n\t\t\t\ttext: error.message,\n\t\t\t\ticon: \"warning\",\n\t\t\t\ttimer: 1000,\n\t\t\t\tposition: \"top\",\n\t\t\t\tshowConfirmButton: false,\n\t\t\t}).then((willProceed)=>{\n\t\t\t\t// @see line 52\n\t\t\t\tweatherAPI.scrollToElement(\"weatherContainer\");\n\t\t\t\t\n\t\t\t});\n\t\t};\n\t\tnavigator.geolocation.watchPosition(\n\t\t\t(position) => {\n\t\t\t\t//check if the user's position was saved before\n\t\t\t\tif (!db.get(\"USER_LONGITUDE\") && !db.get(\"USER_LATITUDE\")) {\n\t\t\t\t\tdb.create(\"USER_LONGITUDE\", position.coords.longitude);\n\t\t\t\t\tdb.create(\"USER_LATITUDE\", position.coords.latitude);\n\t\t\t\t} else {\n\t\t\t\t\t//if saved, then get the current weather using their coordinates\n\n\t\t\t\t\tjQuery(($) => {\n\t\t\t\t\t\t$.noConflict();\n\n\t\t\t\t\t\tconst longitude = position.coords.longitude || db.get(\"USER_LONGITUDE\"),\n\t\t\t\t\t\t\t  latitude = position.coords.latitude || db.get(\"USER_LATITUDE\");\n\t\t\t\t\t\tconst URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${weatherAPI.API_KEY}&units=${weatherAPI.WEATHER_UNIT}`;\n\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\turl: URL,\n\t\t\t\t\t\t\tprocessData: false,\n\t\t\t\t\t\t\tsuccess: (result, status, xhr) => {\n\t\t\t\t\t\t\t\tif (xhr.status != 200) {\n\t\t\t\t\t\t\t\t\tSwal.fire({\n\t\t\t\t\t\t\t\t\t\ttoast: true,\n\t\t\t\t\t\t\t\t\t\tposition: \"top\",\n\t\t\t\t\t\t\t\t\t\ttext: \"Something went wrong!\",\n\t\t\t\t\t\t\t\t\t\ticon: \"info\",\n\t\t\t\t\t\t\t\t\t\tshowConfirmButton: false,\n\t\t\t\t\t\t\t\t\t\ttimer: 3000,\n\t\t\t\t\t\t\t\t\t}).then((willProceed)=>{\n\t\t\t\t\t\t\t\t\t\t//scroll to top after notification\n\t\t\t\t\t\t\t\t\t\tweatherAPI.scrollToElement(\"weatherContainer\");\n\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//if API call was successful\n\t\t\t\t\t\t\t\t\tif (result.cod == 200) {\n\t\t\t\t\t\t\t\t\t\tweatherAPI.updateReactDom(result);\n\t\t\t\t\t\t\t\t\t\tweatherAPI.scrollToElement(\"weatherContainer\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: (xhr, status, error) => {\n\t\t\t\t\t\t\t\tSwal.fire({\n\t\t\t\t\t\t\t\t\ttoast: true,\n\t\t\t\t\t\t\t\t\ttext: error,\n\t\t\t\t\t\t\t\t\ticon: \"warning\",\n\t\t\t\t\t\t\t\t\ttimer: 2000,\n\t\t\t\t\t\t\t\t\tposition: \"top\",\n\t\t\t\t\t\t\t\t\tshowConfirmButton: false,\n\t\t\t\t\t\t\t\t}).then((willProceed)=>{\n\t\t\t\t\t\t\t\t\t// @see line 52\n\t\t\t\t\t\t\t\t\tweatherAPI.scrollToElement(\"weatherContainer\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\terror,\n\t\t\tOPTIONS\n\t\t);\n\t} else {\n\t\tSwal.fire({\n\t\t\ttoast: true,\n\t\t\ttext: \"Geolocation not supported!\",\n\t\t\ticon: \"error\",\n\t\t\tposition: \"top\",\n\t\t\tshowConfirmButton: false,\n\t\t\ttimer: 3000,\n\t\t});\n\t}\n};\n\nexport default getGeolocation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}